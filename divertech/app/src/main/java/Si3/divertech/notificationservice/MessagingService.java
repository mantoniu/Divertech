package Si3.divertech.notificationservice;

import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.util.Log;

import androidx.annotation.NonNull;
import androidx.core.app.NotificationCompat;

import com.google.firebase.messaging.FirebaseMessaging;
import com.google.firebase.messaging.FirebaseMessagingService;
import com.google.firebase.messaging.RemoteMessage;

import java.util.Objects;

import Si3.divertech.LoginActivity;
import Si3.divertech.MainActivity;
import Si3.divertech.R;

/**
 * This class is used to handle the reception of messages from the Firebase Cloud Messaging service.
 * It also handles the retrieval of the FCM token.
 */
public class MessagingService extends FirebaseMessagingService {

    /**
     * This method is called when a message is received from the Firebase Cloud Messaging service.
     * @param remoteMessage Remote message that has been received.
     */
    @Override
    public void onMessageReceived(@NonNull RemoteMessage remoteMessage) {
        super.onMessageReceived(remoteMessage);
        Log.d("FCM", "Message received: " + remoteMessage);
        if ( remoteMessage.getNotification() != null ) {
            Intent intent = new Intent(getApplicationContext(), LoginActivity.class);
            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
            PendingIntent pendingIntent = PendingIntent.getActivity(getApplicationContext(), 0, intent, PendingIntent.FLAG_ONE_SHOT | PendingIntent.FLAG_IMMUTABLE);

            NotificationCompat.Builder notificationBuilder;

            //specific time
            if(remoteMessage.getNotification().getChannelId().equals(NotificationChannel.CHANNEL_INFO)){
                notificationBuilder = new NotificationCompat.Builder(getApplicationContext(), Objects.requireNonNull(remoteMessage.getNotification().getChannelId()))
                        .setSmallIcon(R.drawable.logo)
                        .setContentTitle(remoteMessage.getNotification().getTitle())
                        .setContentText(remoteMessage.getNotification().getBody())
                        .setLargeIcon(ConvertImage.getBitmapFromUrl(String.valueOf(remoteMessage.getNotification().getImageUrl())))
                        .setContentIntent(pendingIntent)
                        .setTimeoutAfter(180000);
            }
            else{
               notificationBuilder = new NotificationCompat.Builder(getApplicationContext(), Objects.requireNonNull(remoteMessage.getNotification().getChannelId()))
                        .setSmallIcon(R.drawable.logo)
                        .setContentTitle(remoteMessage.getNotification().getTitle())
                        .setContentText(remoteMessage.getNotification().getBody())
                        .setLargeIcon(ConvertImage.getBitmapFromUrl(String.valueOf(remoteMessage.getNotification().getImageUrl())))
                        .setContentIntent(pendingIntent);
            }
            NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
            notificationManager.notify(0, notificationBuilder.build());
        }

    }

    /**
     * This method is called when a new token is generated by the Firebase Cloud Messaging service.
     * @param token New token generated.
     */
    @Override
    public void onNewToken(@NonNull String token) {
        Log.d("FCM", "Refreshed token: " + token);
        DBToken.getInstance().setTokenToDb(token);
    }

    /**
     * This method is used to retrieve the FCM token.
     */
    public static void retrieveFCMToken() {
        FirebaseMessaging.getInstance().getToken()
                .addOnCompleteListener(task -> {
                    if (!task.isSuccessful()) {
                        Log.w("FCM failure", "Fetching FCM registration token failed", task.getException());
                        return;
                    }
                    // Get new FCM registration token
                    String token = task.getResult();
                    DBToken.getInstance().setTokenToDb(token);
                });

    }


}
